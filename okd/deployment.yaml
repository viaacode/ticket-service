apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    image.openshift.io/triggers: '[{"from": {"kind": "ImageStreamTag", "name": "${APP}:${ENV}"}, "fieldPath": "spec.template.spec.containers[?(@.name==\"${APP}-${ENV}\")].image"}]'
  labels:
    app: ${APP}
    app.kubernetes.io/component: ${APP}-${ENV}
    app.kubernetes.io/instance: ${APP}-${ENV}
    app.kubernetes.io/name: ${APP}
    app.kubernetes.io/part-of: ${APP}
    app.openshift.io/runtime: ${APP}
    app.openshift.io/runtime-version: ${ENV}
    env: ${ENV}
  name: ${APP}-${ENV}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: ${APP}
      env: ${ENV}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ${APP}
        deployment: ${APP}-${ENV}
        env: ${ENV}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: ibm-cloud.kubernetes.io/worker-pool-name
                operator: In
                values:
                - default
      containers:
      - image: image-registry.openshift-image-registry.svc:5000/meemoo-infra/${APP}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: ${HEALTH_URL}
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 90
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 5
        name: ${APP}-${ENV}
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: ${HEALTH_URL}
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /config.yaml
          name: ${APP}-${ENV}
          readOnly: true
          subPath: config.yaml
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: ${APP}-${ENV}
        secret:
          defaultMode: 420
          secretName: ${APP}-${ENV}
